import { Err } from '@lsk4/err';
import { ILogger } from '@lsk4/log';
import { getComment, jsonToFile } from '@lskjs/stringify';
import { mapSeries } from 'fishbird';
import { mkdir, unlink } from 'fs/promises';

import { GithubService } from '../services/GithubService';
import { GitlabService } from '../services/GitlabService';
import type { Service } from '../services/Service';
import { log as defaultLog } from '../utils/log';

type BuildOptions = {
  buildDir?: string;
  log?: ILogger;
  force?: boolean;
};

function loadConfig(dirname: string) {
  const configPath = `${dirname}/config.js`;
  try {
    // eslint-disable-next-line import/no-dynamic-require
    return require(configPath);
  } catch (err) {
    if (Err.getCode(err) === 'MODULE_NOT_FOUND') {
      defaultLog.error(`${configPath} not found`);
      throw new Err(`${configPath} not found`);
    }
    throw err;
  }
}

export async function build(serviceDirname: string, options: BuildOptions = {}) {
  const log = options.log || defaultLog;
  const buildDir = options.buildDir || `${serviceDirname}/build`;

  const config = await loadConfig(serviceDirname);
  await unlink(`${buildDir}`).catch(() => {});
  await mkdir(buildDir, { recursive: true });

  const serviceName = config.service?.serviceName;
  if (!serviceName) throw new Err('!serviceName');

  let service: Service;
  if (serviceName === 'github') {
    service = new GithubService({
      ...config.service,
      ...options,
    });
  } else if (serviceName === 'gitlab') {
    service = new GitlabService({
      ...config.service,
      ...options,
    });
  } else {
    throw new Err('incorrect serviceName', { serviceName });
  }

  const { files = [] } = config;
  await mapSeries(files, async (fileOptions: any) => {
    const { type, filename, handler } = fileOptions;
    const res = await handler(fileOptions, config);
    const comment = getComment({
      filename,
      values: [
        ['Server', service.getServiceLink()],
        ['Project', service.getProjectPath()],
        ['Project ID', service.getProjectId()],
        ['Project Url', service.getProjectUrl()],
        ['CI/CD Setting', service.getProjectCICDSettingURL()],
      ],
      footer:
        service.getProjectCredsUrl() &&
        `
Auto generated by ${service.getProjectCredsUrl()}
If you want to change something, please contact admin repo.
      `.trim(),
    });
    await jsonToFile(`${buildDir}/${filename}`, res, {
      type,
      compare: !options.force,
      comment,
    });
    log.info(`[build] ${service.getProjectPath()} (${filename})`);
  });
}
